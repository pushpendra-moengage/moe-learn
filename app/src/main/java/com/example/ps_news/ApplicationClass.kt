package com.example.ps_news

import android.app.Application
import android.content.Context
import android.content.SharedPreferences
import android.util.Log
import com.moengage.core.*
import com.moengage.core.analytics.MoEAnalyticsHelper
import com.moengage.core.config.FcmConfig
import com.moengage.core.config.LogConfig
import com.moengage.core.config.NotificationConfig
import com.moengage.core.listeners.AppBackgroundListener
import com.moengage.core.model.AppBackgroundData
import com.moengage.core.model.AppStatus
import com.moengage.firebase.MoEFireBaseHelper
import com.moengage.pushbase.MoEPushHelper
import com.moengage.pushbase.listener.TokenAvailableListener
import com.moengage.pushbase.model.Token

class ApplicationClass : Application() {

    val APP_ID = ""
    val NOT_INSTALLED = -1
    val CURRENT_VERSION = 1

    override fun onCreate() {
        super.onCreate()
        App.init(this)

        val moEngage = MoEngage.Builder(this, APP_ID)
            .configureLogs(LogConfig(LogLevel.VERBOSE, true))
//            .configureFcm(FcmConfig(false))
            .setDataCenter(DataCenter.DATA_CENTER_1)
            .configureNotificationMetaData(NotificationConfig(R.drawable.ic_image_placeholder, R.drawable.ic_image_placeholder))
            .build()

        MoEngage.initialiseDefaultInstance(moEngage)

        val pref = getSharedPreferences("APP_INFO", MODE_PRIVATE)
        val versionNo = pref.getInt("CURRENT_APP_VERSION", -1);

        if (versionNo == NOT_INSTALLED) {
            // Fresh install
            val edit = pref.edit()
            edit.putInt("CURRENT_APP_VERSION", 1).apply();
            MoEAnalyticsHelper.setAppStatus(this, AppStatus.INSTALL)
        } else if (BuildConfig.VERSION_CODE == CURRENT_VERSION) {
            // Normal login
        } else {
            // Update
            MoEAnalyticsHelper.setAppStatus(this, AppStatus.UPDATE)
        }

        MoECoreHelper.addAppBackgroundListener(object : AppBackgroundListener {
            override fun onAppBackground(context: Context, data: AppBackgroundData) {
                Log.d("MOE_TIMBER", "Going in background")
            }

        })

        MoEPushHelper.getInstance().pushPermissionResponse(App.application!!, true)

        MoEPushHelper.getInstance().setUpNotificationChannels(App.application!!)

        /* Pass the push token everytime the app opens - if empty/null that means the
            app is running for the first time and the token is yet to be generated by the app
         */
        val token_pref = getSharedPreferences("token_pref", MODE_PRIVATE)
        val token: String? = token_pref.getString("token", "")

        if(!token.isNullOrBlank())
        {
            MoEFireBaseHelper.getInstance().passPushToken(App.application!!, token)
        }


        /*
            Adding callback for new token add
         */

        MoEFireBaseHelper.getInstance().addTokenListener(object: TokenAvailableListener {
            override fun onTokenAvailable(token: Token) {
                Log.d("MOE_TOKEN_LISTENER", token.pushToken)
            }

        })
    }
}